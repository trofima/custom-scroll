"use strict";class CustomScroll{constructor(t,e,s){this.nodes={el:null,shifted:null,content:null,bar:null,thumb:null};this.document={el:null,listeners:[]};this.listeners={};this.thumbY=0;this.contentHeight=0;CustomScroll.supportedEventTypes.forEach((t=>this.listeners[t]=[]));this.document.el=e;this.setNodes(t);this.observeDOMMutation(s);this.addEventListeners()}static checkEvent(t){function e(t,...e){let s="";for(let i=0;i<e.length;i++)s+=t[i]+e[i];s+=t[e.length];return s.split(/(?:\r\n|\n|\r)/).map((t=>t.replace(/^\s+/gm,""))).join("\n")}if(this.supportedEventTypes.indexOf(t)===-1)throw new TypeError(e`
							Event type '${t}' is not supported.
							Supported events are: ${this.supportedEventTypes.join(", ")}.
						`)}addListener(t,e){CustomScroll.checkEvent(t);if(this.listeners[t])this.listeners[t].push(e)}update(){this.fixMarginRight();if(this.nodes.shifted.scrollHeight>this.nodes.el.offsetHeight)this.show();else this.hide()}setNodes(t){this.nodes.el=t;this.nodes.shifted=t.querySelector(".shifted");this.nodes.content=this.nodes.shifted.querySelector(".content");this.nodes.bar=t.querySelector(".bar");this.nodes.thumb=this.nodes.bar.querySelector(".thumb")}observeDOMMutation(t){let e=new t((()=>this.processDOMMutation()));e.observe(this.nodes.content,{childList:true,attributes:true,subtree:true})}processDOMMutation(){let t=this.nodes.content.offsetHeight;if(this.contentHeight!==t){this.contentHeight=t;this.update()}}fixMarginRight(){let t=this.nodes.shifted;let e=t.offsetWidth-t.clientWidth;if(e){t.style.setProperty("margin-right",-e+"px");this.nodes.content.style.setProperty("margin-right",0+"px")}}hide(){this.nodes.el.classList.remove("visible")}show(){let t=Math.pow(this.nodes.el.offsetHeight,2)/this.nodes.shifted.scrollHeight+"px";this.nodes.el.classList.add("visible");this.nodes.thumb.style.setProperty("height",t);this.invokeListenersFor("change")}addEventListeners(){this.nodes.shifted.addEventListener("scroll",(()=>{this.moveThumb();this.invokeListenersFor("scroll")}));this.nodes.thumb.addEventListener("mousedown",(t=>this.startThumbDragging(t)))}moveThumb(){let t=this.nodes.bar.offsetHeight*this.nodes.shifted.scrollTop/this.nodes.shifted.scrollHeight;this.nodes.thumb.style.setProperty("top",t+"px")}invokeListenersFor(t){let e=this.nodes.shifted;this.listeners[t].forEach((t=>t({offsetHeight:e.offsetHeight,scrollHeight:e.scrollHeight,scrollTop:e.scrollTop})))}startThumbDragging(t){this.nodes.el.classList.add("thumb-dragging");this.thumbY=t.screenY;this.addDocumentEventListener("mousemove",(t=>this.dragThumb(t)));this.addDocumentEventListener("mouseup",(t=>this.finishThumbDragging(t)))}addDocumentEventListener(t,e){this.document.listeners.push({name:t,callback:e});this.document.el.addEventListener(t,e)}dragThumb(t){let e=(t.screenY-this.thumbY)*this.nodes.shifted.scrollHeight/this.nodes.bar.offsetHeight;this.nodes.shifted.scrollTop+=e}finishThumbDragging(t){this.nodes.el.classList.remove("thumb-dragging");this.document.listeners.forEach((t=>this.document.el.removeEventListener(t.name,t.callback)))}}CustomScroll.supportedEventTypes=["scroll","change"],exports.CustomScroll=CustomScroll;